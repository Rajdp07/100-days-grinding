COMPLEXITY--->O(n^2)
public class Solution {
    public void rotate(int[] nums, int k) {
        int temp, previous;
        for (int i = 0; i < k; i++) {
            previous = nums[nums.length - 1];
            for (int j = 0; j < nums.length; j++) {
                temp = nums[j];
                nums[j] = previous;
                previous = temp;
            }
        }
    }
}


COMPLEXITY--->O(n)

class Solution {
    public void rotate(int[] nums, int k) {
        if ((k %= nums.length) == 0) {
            return;
        }
        int rotated = 0, i = 0; 
        while (i < k && rotated != nums.length) {
            int next = i, pre = nums[next];
            do {
                next = (next + k) % nums.length;
                int temp = nums[next];
                nums[next] = pre;
                pre = temp;
                rotated++;
            } while (next != i);
            i++;
        }
    }
}