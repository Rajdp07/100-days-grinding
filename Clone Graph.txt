/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/
class Solution {
    HashMap<Integer, Node> visitedNode = new HashMap<Integer, Node>();
    public Node cloneGraph(Node node) {
        if(node == null){
            return node;
        }
        if(!visitedNode.containsKey(node.val)){
            Node clone = new Node(node.val, new ArrayList<Node>());
            visitedNode.put(node.val, clone);
            List<Node> neighborList = new ArrayList<Node>();
            for(Node neighbor : node.neighbors){
                neighborList.add(cloneGraph(neighbor));
            }
            clone.neighbors = neighborList;
            return clone;
        }else{
            return visitedNode.get(node.val);
        }
    }
}